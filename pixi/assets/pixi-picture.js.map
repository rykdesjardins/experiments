{"version":3,"file":"pixi-picture.js","sourceRoot":"","sources":["../src/PictureShader.ts","../src/HardLightShader.ts","../src/NormalShader.ts","../src/OverlayShader.ts","../src/PictureRenderer.ts","../src/PictureSprite.ts","../src/PictureTilingSprite.ts","../src/mapFilterBlendModesToPixi.ts"],"names":[],"mappings":"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","sourcesContent":["module PIXI.extras {\n    interface InnerLib {\n        vertUniforms: string,\n        vertCode: string,\n        fragUniforms: string,\n        fragCode: string\n    }\n\n    var shaderLib: InnerLib[] = [\n        {\n            vertUniforms: \"\",\n            vertCode: \"vTextureCoord = aTextureCoord;\",\n            fragUniforms: \"uniform vec4 uTextureClamp;\",\n            fragCode: \"vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\"\n        },\n        {\n            //DOES HAVE translationMatrix\n            vertUniforms: \"uniform mat3 uTransform;\",\n            vertCode: \"vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\",\n            fragUniforms: \"\",\n            fragCode: \"vec2 textureCoord = vTextureCoord;\"\n        },\n        {\n            //DOES HAVE translationMatrix\n            vertUniforms: \"uniform mat3 uTransform;\",\n            vertCode: \"vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\",\n            fragUniforms: \"uniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\",\n            fragCode: \"vec2 textureCoord = mod(vTextureCoord - uClampOffset, vec2(1.0, 1.0)) + uClampOffset;\" +\n            \"\\ntextureCoord = (uMapCoord * vec3(textureCoord, 1.0)).xy;\" +\n            \"\\ntextureCoord = clamp(textureCoord, uClampFrame.xy, uClampFrame.zw);\"\n        }\n    ];\n\n    export class PictureShader extends PIXI.Shader {\n\n        tempQuad: Quad;\n        tilingMode: number;\n\n        static blendVert = `\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\n\nuniform mat3 projectionMatrix;\nuniform mat3 mapMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec2 vMapCoord;\n%SPRITE_UNIFORMS%\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    %SPRITE_CODE%\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\n}\n`;\n\n        /**\n         * @class\n         * @extends PIXI.Shader\n         * @memberof PIXI.extras\n         * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\n         * @param vert {string}\n         * @param frag {string}\n         * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\n         */\n        constructor(gl: WebGLRenderingContext, vert: string, frag: string, tilingMode: number) {\n            var lib = shaderLib[tilingMode];\n            super(gl,\n                vert.replace(/%SPRITE_UNIFORMS%/gi, lib.vertUniforms)\n                    .replace(/%SPRITE_CODE%/gi, lib.vertCode),\n                frag.replace(/%SPRITE_UNIFORMS%/gi, lib.fragUniforms)\n                    .replace(/%SPRITE_CODE%/gi, lib.fragCode));\n\n            this.bind()\n            this.tilingMode = tilingMode;\n            this.tempQuad = new Quad(gl);\n            this.tempQuad.initVao(this);\n\n            this.uniforms.uColor = new Float32Array([1,1,1,1]);\n            this.uniforms.uSampler = [0, 1];\n        }\n    }\n}\n","/// <reference types=\"pixi.js\" />\n/// <reference path=\"PictureShader.ts\" />\n\nmodule PIXI.extras {\n    var overlayFrag = `\nvarying vec2 vTextureCoord;\nvarying vec2 vMapCoord;\nvarying vec4 vColor;\n\nuniform sampler2D uSampler[2];\nuniform vec4 uColor;\n%SPRITE_UNIFORMS%\n\nvoid main(void)\n{\n    %SPRITE_CODE%\n    vec4 source = texture2D(uSampler[0], textureCoord) * uColor;\n    vec4 target = texture2D(uSampler[1], vMapCoord);\n\n    //reverse hardlight\n    if (source.a == 0.0) {\n        gl_FragColor = vec4(0, 0, 0, 0);\n        return;\n    }\n    //yeah, premultiplied\n    vec3 Cb = source.rgb/source.a, Cs;\n    if (target.a > 0.0) {\n        Cs = target.rgb / target.a;\n    }\n    vec3 multiply = Cb * Cs * 2.0;\n    vec3 Cs2 = Cs * 2.0 - 1.0;\n    vec3 screen = Cb + Cs2 - Cb * Cs2;\n    vec3 B;\n    if (Cb.r <= 0.5) {\n        B.r = multiply.r;\n    } else {\n        B.r = screen.r;\n    }\n    if (Cb.g <= 0.5) {\n        B.g = multiply.g;\n    } else {\n        B.g = screen.g;\n    }\n    if (Cb.b <= 0.5) {\n        B.b = multiply.b;\n    } else {\n        B.b = screen.b;\n    }\n    vec4 res;\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\n    res.a = source.a + target.a * (1.0-source.a);\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\n}\n`;\n\n    /**\n     * @class\n     * @extends PIXI.Shader\n     * @memberof PIXI.extras\n     * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\n     * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\n     */\n    export class HardLightShader extends PictureShader {\n        constructor(gl: WebGLRenderingContext, tilingMode: number) {\n            super(gl, PictureShader.blendVert, overlayFrag, tilingMode);\n        }\n    }\n}\n","\n\nmodule PIXI.extras {\n\n    var normalFrag = `\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform sampler2D uSampler[2];\nuniform vec4 uColor;\n%SPRITE_UNIFORMS%\n\nvoid main(void)\n{\n    %SPRITE_CODE%\n\n    vec4 sample = texture2D(uSampler[0], textureCoord);\n    gl_FragColor = sample * uColor;\n}\n`;\n\n    var normalVert = `\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aColor;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n%SPRITE_UNIFORMS%\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    %SPRITE_CODE%\n}\n`;\n\n    export class NormalShader extends PictureShader {\n        /**\n         * @class\n         * @extends PIXI.Shader\n         * @memberof PIXI.extras\n         * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\n         * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\n         */\n        constructor(gl: WebGLRenderingContext, tilingMode: number) {\n            super(gl, normalVert, normalFrag, tilingMode);\n        }\n    }\n}\n","module PIXI.extras {\n    var overlayFrag = `\nvarying vec2 vTextureCoord;\nvarying vec2 vMapCoord;\nvarying vec4 vColor;\n\nuniform sampler2D uSampler[2];\nuniform vec4 uColor;\n%SPRITE_UNIFORMS%\n\nvoid main(void)\n{\n    %SPRITE_CODE%\n    vec4 source = texture2D(uSampler[0], textureCoord) * uColor;\n    vec4 target = texture2D(uSampler[1], vMapCoord);\n\n    //reverse hardlight\n    if (source.a == 0.0) {\n        gl_FragColor = vec4(0, 0, 0, 0);\n        return;\n    }\n    //yeah, premultiplied\n    vec3 Cb = source.rgb/source.a, Cs;\n    if (target.a > 0.0) {\n        Cs = target.rgb / target.a;\n    }\n    vec3 multiply = Cb * Cs * 2.0;\n    vec3 Cb2 = Cb * 2.0 - 1.0;\n    vec3 screen = Cb2 + Cs - Cb2 * Cs;\n    vec3 B;\n    if (Cs.r <= 0.5) {\n        B.r = multiply.r;\n    } else {\n        B.r = screen.r;\n    }\n    if (Cs.g <= 0.5) {\n        B.g = multiply.g;\n    } else {\n        B.g = screen.g;\n    }\n    if (Cs.b <= 0.5) {\n        B.b = multiply.b;\n    } else {\n        B.b = screen.b;\n    }\n    vec4 res;\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\n    res.a = source.a + target.a * (1.0-source.a);\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\n}\n`;\n\n    /**\n     * @class\n     * @extends PIXI.Shader\n     * @memberof PIXI.extras\n     * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\n     * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\n     */\n    export class OverlayShader extends PictureShader {\n        constructor(gl: WebGLRenderingContext, tilingMode: number) {\n            super(gl, PictureShader.blendVert, overlayFrag, tilingMode);\n        }\n    }\n}\n","module PIXI.extras {\n    function nextPow2(v: number): number {\n        v += (v === 0)?1:0;\n        --v;\n        v |= v >>> 1;\n        v |= v >>> 2;\n        v |= v >>> 4;\n        v |= v >>> 8;\n        v |= v >>> 16;\n        return v + 1;\n    }\n\n    export class PictureRenderer extends ObjectRenderer {\n        constructor(renderer: WebGLRenderer) {\n            super(renderer)\n        }\n\n        drawModes: Array<Array<PictureShader>>;\n        normalShader: Array<PictureShader>;\n        _tempClamp: Float32Array;\n        _tempColor: Float32Array;\n        _tempRect: PIXI.Rectangle;\n        _tempRect2: PIXI.Rectangle;\n        _tempRect3: PIXI.Rectangle;\n        _tempMatrix: PIXI.Matrix;\n        _tempMatrix2: PIXI.Matrix;\n        _bigBuf: Uint8Array;\n        _renderTexture: PIXI.BaseRenderTexture;\n\n        onContextChange() {\n            const gl = this.renderer.gl;\n            this.drawModes = mapFilterBlendModesToPixi(gl);\n            this.normalShader = [new NormalShader(gl, 0), new NormalShader(gl, 1), new NormalShader(gl, 2)];\n            this._tempClamp = new Float32Array(4);\n            this._tempColor = new Float32Array(4);\n            this._tempRect = new PIXI.Rectangle();\n            this._tempRect2 = new PIXI.Rectangle();\n            this._tempRect3 = new PIXI.Rectangle();\n            this._tempMatrix = new PIXI.Matrix();\n            this._tempMatrix2 = new PIXI.Matrix();\n            this._bigBuf = new Uint8Array(1 << 20);\n            this._renderTexture = new PIXI.BaseRenderTexture(1024, 1024);\n        }\n\n        start() {\n\n        }\n\n        flush() {\n\n        }\n\n        _getRenderTexture(minWidth: number, minHeight: number) {\n            if (this._renderTexture.width < minWidth ||\n                this._renderTexture.height < minHeight) {\n                minHeight = nextPow2(minWidth);\n                minHeight = nextPow2(minHeight);\n                this._renderTexture.resize(minWidth, minHeight);\n            }\n            return this._renderTexture;\n        }\n\n        _getBuf(size: number): Float32Array {\n            let buf = this._bigBuf;\n            if (buf.length < size) {\n                size = nextPow2(size);\n                buf = new Uint8Array(size);\n                this._bigBuf = buf;\n            }\n            return buf;\n        }\n\n        render(sprite: Sprite) {\n            if (!sprite.texture.valid) {\n                return;\n            }\n            let tilingMode = 0;\n            if ((sprite as any).tileTransform) {\n                //for Sprite\n                tilingMode = this._isSimpleSprite(sprite) ? 1 : 2;\n            }\n\n            const blendShader = this.drawModes[sprite.blendMode];\n            if (blendShader) {\n                this._renderBlend(sprite, blendShader[tilingMode]);\n            } else {\n                this._renderNormal(sprite, this.normalShader[tilingMode]);\n            }\n        }\n\n        _renderNormal(sprite: Sprite, shader: PictureShader) {\n            const renderer = this.renderer;\n            renderer.bindShader(shader);\n            renderer.state.setBlendMode(sprite.blendMode);\n            this._renderInner(sprite, shader);\n        }\n\n        _renderBlend(sprite: Sprite, shader: PictureShader) {\n            //nothing there yet\n            const renderer = this.renderer;\n            const spriteBounds = sprite.getBounds();\n            const renderTarget = renderer._activeRenderTarget;\n            const matrix = renderTarget.projectionMatrix;\n            const flipX = matrix.a < 0;\n            const flipY = matrix.d < 0;\n            const resolution = renderTarget.resolution;\n            const screen = this._tempRect;\n            const fr = renderTarget.sourceFrame || renderTarget.destinationFrame;\n            screen.x = 0;\n            screen.y = 0;\n            screen.width = fr.width;\n            screen.height = fr.height;\n\n            const bounds = this._tempRect2;\n            const fbw = fr.width * resolution, fbh = fr.height * resolution;\n            bounds.x = (spriteBounds.x + matrix.tx / matrix.a) * resolution + fbw / 2;\n            bounds.y = (spriteBounds.y + matrix.ty / matrix.d) * resolution + fbh / 2;\n            bounds.width = spriteBounds.width * resolution;\n            bounds.height = spriteBounds.height * resolution;\n            if (flipX) {\n                bounds.y = fbw - bounds.width - bounds.x;\n            }\n            if (flipY) {\n                bounds.y = fbh - bounds.height - bounds.y;\n            }\n\n            const screenBounds = this._tempRect3;\n            const x_1 = Math.floor(Math.max(screen.x, bounds.x));\n            const x_2 = Math.ceil(Math.min(screen.x + screen.width, bounds.x + bounds.width));\n            const y_1 = Math.floor(Math.max(screen.y, bounds.y));\n            const y_2 = Math.ceil(Math.min(screen.y + screen.height, bounds.y + bounds.height));\n            const pixelsWidth = x_2 - x_1;\n            const pixelsHeight = y_2 - y_1;\n            if (pixelsWidth <= 0 || pixelsHeight <= 0) {\n                //culling\n                return;\n            }\n            //TODO: padding\n            const rt = this._getRenderTexture(pixelsWidth, pixelsHeight);\n            renderer.bindTexture(rt, 1, true);\n            const gl = renderer.gl;\n            if (renderer.renderingToScreen && renderTarget.root) {\n                const buf = this._getBuf(pixelsWidth * pixelsHeight * 4);\n                gl.readPixels(x_1, y_1, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\n                //REVERT Y?\n                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\n            } else {\n                gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x_1, y_1, pixelsWidth, pixelsHeight);\n            }\n\n            renderer.bindShader(shader);\n            renderer.state.setBlendMode(PIXI.BLEND_MODES.NORMAL);\n            if (shader.uniforms.mapMatrix) {\n                const mapMatrix = this._tempMatrix;\n                mapMatrix.a = bounds.width / rt.width / spriteBounds.width;\n                if (flipX) {\n                    mapMatrix.a = -mapMatrix.a;\n                    mapMatrix.tx = (bounds.x - x_1) / rt.width - (spriteBounds.x + spriteBounds.width) * mapMatrix.a;\n                } else {\n                    mapMatrix.tx = (bounds.x - x_1) / rt.width - spriteBounds.x * mapMatrix.a;\n                }\n                mapMatrix.d = bounds.height / rt.height / spriteBounds.height;\n                if (flipY) {\n                    mapMatrix.d = -mapMatrix.d;\n                    mapMatrix.ty = (bounds.y - y_1) / rt.height - (spriteBounds.y + spriteBounds.height) * mapMatrix.d;\n                } else {\n                    mapMatrix.ty = (bounds.y - y_1) / rt.height - spriteBounds.y * mapMatrix.d;\n                }\n\n                shader.uniforms.mapMatrix = mapMatrix.toArray(true);\n            }\n\n            this._renderInner(sprite, shader);\n        }\n\n        _renderInner(sprite: Sprite, shader: PictureShader) {\n            const renderer = this.renderer;\n            if (shader.tilingMode > 0) {\n                this._renderWithShader(sprite as TilingSprite, shader.tilingMode === 1, shader);\n            } else {\n                this._renderSprite(sprite, shader);\n            }\n        }\n\n        _renderWithShader(ts: TilingSprite, isSimple: boolean, shader: PictureShader) {\n            const quad = shader.tempQuad;\n            const renderer = this.renderer;\n            renderer.bindVao(quad.vao);\n            let vertices = quad.vertices;\n\n            const _width: number = (ts as any)._width;\n            const _height: number = (ts as any)._height;\n            const _anchorX: number = (ts as any)._anchor._x;\n            const _anchorY: number = (ts as any)._anchor._y;\n\n            const w0 = _width * (1 - _anchorX);\n            const w1 = _width * -_anchorX;\n\n            const h0 = _height * (1 - _anchorY);\n            const h1 = _height * -_anchorY;\n\n            const wt = ts.transform.worldTransform;\n\n            const a = wt.a;\n            const b = wt.b;\n            const c = wt.c;\n            const d = wt.d;\n            const tx = wt.tx;\n            const ty = wt.ty;\n\n            vertices[0] = (a * w1) + (c * h1) + tx;\n            vertices[1] = (d * h1) + (b * w1) + ty;\n\n            vertices[2] = (a * w0) + (c * h1) + tx;\n            vertices[3] = (d * h1) + (b * w0) + ty;\n\n            vertices[4] = (a * w0) + (c * h0) + tx;\n            vertices[5] = (d * h0) + (b * w0) + ty;\n\n            vertices[6] = (a * w1) + (c * h0) + tx;\n            vertices[7] = (d * h0) + (b * w1) + ty;\n\n            vertices = quad.uvs;\n\n            vertices[0] = vertices[6] = -ts.anchor.x;\n            vertices[1] = vertices[3] = -ts.anchor.y;\n\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n\n            quad.upload();\n\n            const tex = (ts as any)._texture;\n            const lt = ts.tileTransform.localTransform;\n            const uv = ts.uvTransform;\n            const mapCoord : Matrix = (uv as any).mapCoord;\n            const uClampFrame : Float32Array = (uv as any).uClampFrame;\n            const uClampOffset : Float32Array = (uv as any).uClampOffset;\n\n            const w = tex.width;\n            const h = tex.height;\n            const W = _width;\n            const H = _height;\n\n            const tempMat = this._tempMatrix2;\n\n            tempMat.set(lt.a * w / W,\n                lt.b * w / H,\n                lt.c * h / W,\n                lt.d * h / H,\n                lt.tx / W,\n                lt.ty / H);\n\n            // that part is the same as above:\n            // tempMat.identity();\n            // tempMat.scale(tex.width, tex.height);\n            // tempMat.prepend(lt);\n            // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n            tempMat.invert();\n            if (isSimple) {\n                tempMat.append(mapCoord);\n            }\n            else {\n                shader.uniforms.uMapCoord = mapCoord.toArray(true);\n                shader.uniforms.uClampFrame = uClampFrame;\n                shader.uniforms.uClampOffset = uClampOffset;\n            }\n            shader.uniforms.uTransform = tempMat.toArray(true);\n\n            const color = this._tempColor;\n            const alpha = ts.worldAlpha;\n\n            PIXI.utils.hex2rgb(ts.tint, color as any);\n            color[0] *= alpha;\n            color[1] *= alpha;\n            color[2] *= alpha;\n            color[3] = alpha;\n            shader.uniforms.uColor = color;\n\n            renderer.bindTexture(tex, 0, true);\n            quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\n        }\n\n        _renderSprite(sprite: Sprite, shader: PictureShader) {\n            const renderer = this.renderer;\n            const quad = shader.tempQuad;\n            renderer.bindVao(quad.vao);\n            const uvs : TextureUvs = (sprite.texture as any)._uvs;\n\n            //sprite already has calculated the vertices. lets transfer them to quad\n\n            const vertices = quad.vertices;\n            const vd : Float32Array = sprite.vertexData;\n            for (let i = 0; i < 8; i++) {\n                quad.vertices[i] = vd[i];\n            }\n\n            //SpriteRenderer works differently, with uint32 UVS\n            //but for our demo float uvs are just fine\n            quad.uvs[0] = uvs.x0;\n            quad.uvs[1] = uvs.y0;\n            quad.uvs[2] = uvs.x1;\n            quad.uvs[3] = uvs.y1;\n            quad.uvs[4] = uvs.x2;\n            quad.uvs[5] = uvs.y2;\n            quad.uvs[6] = uvs.x3;\n            quad.uvs[7] = uvs.y3;\n\n            //TODO: add baricentric coords here\n            quad.upload();\n\n            const frame = sprite.texture.frame;\n            const base = sprite.texture.baseTexture;\n            const clamp = this._tempClamp;\n            //clamping 0.5 pixel from each side to reduce border artifact\n            //this is our plugin main purpose\n            const eps = 0.5 / base.resolution;\n            clamp[0] = (frame.x + eps) / base.width;\n            clamp[1] = (frame.y + eps) / base.height;\n            clamp[2] = (frame.x + frame.width - eps) / base.width;\n            clamp[3] = (frame.y + frame.height - eps) / base.height;\n            //take a notice that size in pixels is realWidth,realHeight\n            //width and height are divided by resolution\n            shader.uniforms.uTextureClamp = clamp;\n\n            const color = this._tempColor;\n            PIXI.utils.hex2rgb(sprite.tint, color as any);\n            const alpha = sprite.worldAlpha;\n            //premultiplied alpha tint\n            //of course we could do that in shader too\n            color[0] *= alpha;\n            color[1] *= alpha;\n            color[2] *= alpha;\n            color[3] = alpha;\n            shader.uniforms.uColor = color;\n\n            //bind texture to unit 0, our default sampler unit\n            renderer.bindTexture(base, 0, true);\n            quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\n        }\n\n        _isSimpleSprite(ts: Sprite): boolean {\n            const renderer = this.renderer;\n            const tex : Texture = (ts as any)._texture;\n            const baseTex = tex.baseTexture;\n            let isSimple = (baseTex as any).isPowerOfTwo && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n            // auto, force repeat wrapMode for big tiling textures\n            if (isSimple) {\n                if (!(baseTex as any)._glTextures[renderer.CONTEXT_UID]) {\n                    if (baseTex.wrapMode === WRAP_MODES.CLAMP) {\n                        baseTex.wrapMode = WRAP_MODES.REPEAT;\n                    }\n                }\n                else {\n                    isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n                }\n            }\n\n            return isSimple;\n        }\n    }\n\n    PIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\n    PIXI.CanvasRenderer.registerPlugin('picture', CanvasSpriteRenderer);\n}\n","module PIXI.extras {\n    export class PictureSprite extends Sprite {\n        constructor(texture: Texture) {\n            super(texture);\n            this.pluginName = 'picture'\n        }\n    }\n}\n","module PIXI.extras {\n    export class PictureTilingSprite extends TilingSprite {\n        constructor(texture: Texture) {\n            super(texture);\n            this.pluginName = 'picture'\n        }\n    }\n}\n","module PIXI.extras {\n    export function mapFilterBlendModesToPixi(gl: WebGLRenderingContext, array: Array<Array<PictureShader>> = []): Array<Array<PictureShader>>\n    {\n        //TODO - premultiply alpha would be different.\n        //add a boolean for that!\n        array[PIXI.BLEND_MODES.OVERLAY] = [new OverlayShader(gl, 0), new OverlayShader(gl, 1), new OverlayShader(gl, 2)];\n        array[PIXI.BLEND_MODES.HARD_LIGHT] = [new HardLightShader(gl, 0), new HardLightShader(gl, 1), new HardLightShader(gl, 2)];\n\n        return array;\n    }\n}\n"]}